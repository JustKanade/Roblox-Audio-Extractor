// ... existing code ...
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install nuitka
          pip install ordered-set  # Nuitka依赖
          pip install zstandard    # 优化压缩
          pip install PySide6      # 显式安装PySide6
      - name: Build application
        run: |
          # 如果是稳定版本，使用简单的命名
          if ("${{ needs.prepare.outputs.channel }}" -eq "stable") {
            $name = "Roblox_Audio_Extractor_v${{ needs.prepare.outputs.version }}_win"
          } else {
            $name = "Roblox_Audio_Extractor_${{ needs.prepare.outputs.tag }}_win"
          }
          
          python -m nuitka --standalone `
            --windows-disable-console `
            --windows-icon-from-ico=res/icons/logo.ico `
            --include-data-dir=res=res/ `
            --include-data-dir=src=src/ `
            --output-dir=dist `
            --assume-yes-for-downloads `
            --enable-plugin=pyside6 `
            --follow-imports `
            main.py
          
          # 重命名输出目录中的可执行文件
          $outputDir = "main.dist"
          if (Test-Path -Path $outputDir) {
            if (-not (Test-Path -Path dist)) {
              New-Item -ItemType Directory -Path dist
            }
            Rename-Item -Path "$outputDir\main.exe" -NewName "$name.exe"
            Copy-Item -Path "$outputDir\$name.exe" -Destination "dist\" -Force
          } else {
            Write-Error "构建输出目录 $outputDir 不存在"
            exit 1
          }
// ... existing code ...
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libxcb-xinerama0 libxkbcommon-x11-0 patchelf
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install nuitka
          pip install ordered-set  # Nuitka依赖
          pip install zstandard    # 优化压缩
          pip install PySide6      # 显式安装PySide6
// ... existing code ...
      - name: Build application
        run: |
          # 如果是稳定版本，使用简单的命名
          if [ "${{ needs.prepare.outputs.channel }}" = "stable" ]; then
            name="Roblox_Audio_Extractor_v${{ needs.prepare.outputs.version }}_linux"
          else
            name="Roblox_Audio_Extractor_${{ needs.prepare.outputs.tag }}_linux"
          fi
          
          python -m nuitka --standalone \
            --include-data-dir=res=res/ \
            --include-data-dir=src=src/ \
            --output-dir=dist \
            --assume-yes-for-downloads \
            --enable-plugin=pyside6 \
            --follow-imports \
            main.py
          
          # 重命名并移动输出文件
          mkdir -p dist
          if [ -d "main.dist" ]; then
            mv main.dist/main dist/$name
            chmod +x dist/$name
          else
            echo "构建输出目录 main.dist 不存在"
            exit 1
          fi
// ... existing code ...
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install nuitka
          pip install ordered-set  # Nuitka依赖
          pip install zstandard    # 优化压缩
          pip install PySide6      # 显式安装PySide6
// ... existing code ...
      - name: Build application
        run: |
          # 如果是稳定版本，使用简单的命名
          if [ "${{ needs.prepare.outputs.channel }}" = "stable" ]; then
            name="Roblox_Audio_Extractor_v${{ needs.prepare.outputs.version }}_macos"
          else
            name="Roblox_Audio_Extractor_${{ needs.prepare.outputs.tag }}_macos"
          fi
          
          python -m nuitka --standalone \
            --include-data-dir=res=res/ \
            --include-data-dir=src=src/ \
            --assume-yes-for-downloads \
            --enable-plugin=pyside6 \
            --follow-imports \
            --macos-create-app-bundle \
            main.py
          
          # 创建单文件版本
          mkdir -p dist
          if [ -d "main.app" ]; then
            cp -r main.app dist/
            mv dist/main.app dist/"$name.app"
            # 创建可执行文件副本
            cp dist/"$name.app"/Contents/MacOS/main dist/$name
            chmod +x dist/$name
          else
            echo "构建输出目录 main.app 不存在"
            exit 1
          fi
