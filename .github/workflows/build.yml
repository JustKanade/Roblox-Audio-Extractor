name: Auto Build, Compress & Release

on:
  push:
    branches: ["main"]
    tags: ["v*.*.*"]
  workflow_dispatch:

# 不取消正在运行的请求，而是排队等待，以避免因优先级问题被取消
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  id-token: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set-tag.outputs.tag }}
      build_date: ${{ steps.set-date.outputs.date }}
    steps:
      - name: Set up Git
        uses: actions/checkout@v4

      - name: Determine Tag
        id: set-tag
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            TAG_NAME=${{ github.ref_name }}
          else
            TAG_NAME="dev-$(date +'%Y%m%d%H%M')"
          fi
          echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Determine Build Date
        id: set-date
        run: |
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "date=$BUILD_DATE" >> $GITHUB_OUTPUT

  build:
    needs: prepare
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    env:
      BUILD_DATE: ${{ needs.prepare.outputs.build_date }}
      TAG_NAME: ${{ needs.prepare.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install nuitka upx

      - name: Build with Nuitka
        run: |
          nuitka \
            --standalone \
            --show-progress \
            --remove-output \
            --lto=no \
            --output-dir=dist/${{ matrix.os }} \
            main.py

      - name: Compress with UPX (max)
        run: |
          find dist/${{ matrix.os }} -type f \( -name '*.exe' -o -perm /111 \) -print0 \
            | xargs -0 --max-procs=4 --no-run-if-empty upx --best --ultra-brute

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-build
          path: dist/${{ matrix.os }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare.outputs.tag }}
          name: "Build ${{ needs.prepare.outputs.tag }} (${{ needs.prepare.outputs.build_date }})"
          body: |
            Automatic build of version ${{ needs.prepare.outputs.tag }}.

            **Commit**: ${{ github.sha }}
            **Built at**: ${{ needs.prepare.outputs.build_date }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/ubuntu-latest/**
            artifacts/windows-latest/**
            artifacts/macos-latest/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
