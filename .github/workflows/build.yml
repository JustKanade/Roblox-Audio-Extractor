name: Auto Build and Release

on:
push:
branches: \["main"]
tags: \["v\*"]         # Trigger on version tags for releases
workflow\_dispatch:

permissions:
contents: write

jobs:
prepare:
runs-on: ubuntu-latest
outputs:
tag: \${{ steps.set-tag.outputs.tag }}
build\_date: \${{ steps.set-date.outputs.date }}
steps:
\- name: Checkout repository
uses: actions/checkout\@v4

```
  - name: Determine tag
    id: set-tag
    run: |
      if [[ "${{ github.ref_type }}" == "tag" ]]; then
        echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
      else
        TAG="v$(date +'%Y.%m.%d')-${{ github.run_number }}"
        echo "tag=$TAG" >> $GITHUB_OUTPUT
      fi

  - name: Set build date
    id: set-date
    run: echo "date=$(date -u '+%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
```

build:
needs: prepare
runs-on: ubuntu-latest
strategy:
matrix:
os: \[windows-latest, ubuntu-latest, macos-latest]
steps:
\- name: Checkout code
uses: actions/checkout\@v4

```
  - name: Setup Python
    uses: actions/setup-python@v4
    with:
      python-version: '3.11'

  - name: Install Nuitka & dependencies
    run: |
      python -m pip install --upgrade pip
      pip install nuitka upx-python-plugin

  - name: Build executable (${{ matrix.os }})
    run: |
      nuitka --standalone --remove-output --lto=no --output-dir=artifacts/${{ matrix.os }} \
        --main=Roblox_Audio_Extractor.py --plugin-enable=upx

  - name: UPX compression
    if: matrix.os == 'windows-latest'
    run: |
      upx --force --ultra-brute artifacts/windows-latest/*.exe

  - name: Upload artifact
    uses: actions/upload-artifact@v3
    with:
      name: build-${{ matrix.os }}
      path: artifacts/${{ matrix.os }}/
```

release:
needs: build
runs-on: ubuntu-latest
steps:
\- name: Create GitHub Release
id: publish
uses: softprops/action-gh-release\@v1
with:
tag\_name: \${{ needs.prepare.outputs.tag }}
name: "Release \${{ needs.prepare.outputs.tag }}"
body: |
**Release:** \[\${{ needs.prepare.outputs.tag }}]\([https://github.com/\${{](https://github.com/${{) github.repository }}/releases/tag/\${{ needs.prepare.outputs.tag }})

```
        **Commit:** ${{ github.sha }}
        **Build date (UTC):** ${{ needs.prepare.outputs.build_date }}

        | Platform | Artifact |
        |----------|----------|
        | Windows  | [Download](https://github.com/${{ github.repository }}/releases/download/${{ needs.prepare.outputs.tag }}/build-windows.zip) |
        | Linux    | [Download](https://github.com/${{ github.repository }}/releases/download/${{ needs.prepare.outputs.tag }}/build-linux.tar.gz) |
        | macOS    | [Download](https://github.com/${{ github.repository }}/releases/download/${{ needs.prepare.outputs.tag }}/build-macos.tar.gz) |
      draft: false
      prerelease: false
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  - name: Announce release URL
    run: |
      echo "Release published: https://github.com/${{ github.repository }}/releases/tag/${{ needs.prepare.outputs.tag }}"
```
