
name: Auto Build and Release

on:
  push:
    branches: ["main"]
    tags: ["v*"]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set-tag.outputs.tag }}
      build_date: ${{ steps.set-date.outputs.date }}
    steps:
      - uses: actions/checkout@v4
        name: Checkout repository

      - id: set-tag
        name: Determine tag
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            echo "tag=v$(date +'%Y.%m.%d')-${{ github.run_number }}" >> $GITHUB_OUTPUT
          fi

      - id: set-date
        name: Set build date
        run: echo "date=$(date -u '+%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

  build:
    needs: prepare
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        name: Checkout code

      - uses: actions/setup-python@v4
        name: Setup Python 3.11
        with:
          python-version: '3.11'

      - name: Install UPX
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            sudo apt-get update && sudo apt-get install -y upx
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            brew update && brew install upx
          else
            choco install upx -y
          fi

      - name: Install Nuitka
        run: python -m pip install --upgrade pip && pip install nuitka

      - name: Build executable
        run: |
          nuitka --standalone --remove-output --lto=no \
            --output-dir=artifacts/${{ matrix.os }} \
            --main=Roblox_Audio_Extractor.py --plugin-enable=upx

      - name: UPX compression
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
          upx --force --ultra-brute artifacts/windows-latest\*.exe

      - uses: actions/upload-artifact@v4
        name: Upload artifact
        with:
          name: build-${{ matrix.os }}
          path: artifacts/${{ matrix.os }}/

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: softprops/action-gh-release@v1
        id: publish
        name: Create GitHub Release
        with:
          tag_name: ${{ needs.prepare.outputs.tag }}
          name: "Release ${{ needs.prepare.outputs.tag }}"
          body: |
            **Release:** ${{ needs.prepare.outputs.tag }}
            **Commit:** ${{ github.sha }}
            **Build Date (UTC):** ${{ needs.prepare.outputs.build_date }}

            | Platform | Artifact |
            | -------- | -------- |
            | Windows  | build-windows.zip |
            | Linux    | build-linux.tar.gz |
            | macOS    | build-macos.tar.gz |
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output release URL
        run: echo "Release published: https://github.com/${{ github.repository }}/releases/tag/${{ needs.prepare.outputs.tag }}"
